const { MongoClient, ObjectId } = require("mongodb"); // üîπ Importamos ObjectId

const uri = process.env.MONGO_URL; // üîπ URL de conexi√≥n en Vercel
const client = new MongoClient(uri);
let dbInstance; // üîπ Guardamos la instancia para evitar m√∫ltiples conexiones

async function connectDB() {
    if (!dbInstance) {
        try {
            await client.connect();
            console.log("‚úÖ Conectado a MongoDB desde Vercel!");
            dbInstance = client.db("test"); // üîπ Usa el nombre de la BD correcto
        } catch (error) {
            console.error("‚ö†Ô∏è Error en conexi√≥n:", error.message);
            process.exit(1);
        }
    }
    return dbInstance;
}

// üîπ Funci√≥n para consultar la clave en la colecci√≥n "keys"
async function getKey() {
    const db = await connectDB();

    const result = await db.collection("keys").findOne({ id: 1 });//id fijo

    return result?.key || "‚ö†Ô∏è No se encontr√≥ la clave"; // üîπ Retorna el valor de "key"
}


async function isFailMasive() {
    const db = await connectDB();

    const result = await db.collection("masive").findOne({ id: 1 });//id fijo

    return result?.fail || 0; // üîπ Retorna el valor de 0 o 1 y por defecto 0
}

async function updateFailMasive(value) {
    const db = await connectDB();

    const result = await db.collection("masive").updateOne(
        { id: 1 }, // üîπ Busca el documento con id fijo
        { $set: { fail: value} } // üîπ Actualiza el campo "fail"
    );

    return result.matchedCount > 0
        ? "‚úÖ Documento actualizado!"
        : "‚ö†Ô∏è No se encontr√≥ el documento.";
}




module.exports = { connectDB, getKey, isFailMasive,updateFailMasive };